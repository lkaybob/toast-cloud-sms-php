<?php
/**
 * MmsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Toast Cloud SMS
 *
 * Toast Cloud SMS API Specification
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ToastCloud\Model;

use \ArrayAccess;
use \ToastCloud\ObjectSerializer;

/**
 * MmsBody Class Doc Comment
 *
 * @category Class
 * @description 문자 발송 요청에 필요한 정보들
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MmsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mmsBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'templateId' => 'string',
        'title' => 'string',
        'body' => 'string',
        'sendNo' => 'string',
        'requestDate' => 'string',
        'sendingGroupingKey' => 'string',
        'recipientList' => '\ToastCloud\Model\Recipient[]',
        'userId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'templateId' => null,
        'title' => null,
        'body' => null,
        'sendNo' => null,
        'requestDate' => 'yyyy-MM-dd HH:mm',
        'sendingGroupingKey' => null,
        'recipientList' => null,
        'userId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'templateId' => 'templateId',
        'title' => 'title',
        'body' => 'body',
        'sendNo' => 'sendNo',
        'requestDate' => 'requestDate',
        'sendingGroupingKey' => 'sendingGroupingKey',
        'recipientList' => 'recipientList',
        'userId' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'templateId' => 'setTemplateId',
        'title' => 'setTitle',
        'body' => 'setBody',
        'sendNo' => 'setSendNo',
        'requestDate' => 'setRequestDate',
        'sendingGroupingKey' => 'setSendingGroupingKey',
        'recipientList' => 'setRecipientList',
        'userId' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'templateId' => 'getTemplateId',
        'title' => 'getTitle',
        'body' => 'getBody',
        'sendNo' => 'getSendNo',
        'requestDate' => 'getRequestDate',
        'sendingGroupingKey' => 'getSendingGroupingKey',
        'recipientList' => 'getRecipientList',
        'userId' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['templateId'] = isset($data['templateId']) ? $data['templateId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['sendNo'] = isset($data['sendNo']) ? $data['sendNo'] : null;
        $this->container['requestDate'] = isset($data['requestDate']) ? $data['requestDate'] : null;
        $this->container['sendingGroupingKey'] = isset($data['sendingGroupingKey']) ? $data['sendingGroupingKey'] : null;
        $this->container['recipientList'] = isset($data['recipientList']) ? $data['recipientList'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['templateId']) && (mb_strlen($this->container['templateId']) > 50)) {
            $invalidProperties[] = "invalid value for 'templateId', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 40)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ((mb_strlen($this->container['body']) > 2000)) {
            $invalidProperties[] = "invalid value for 'body', the character length must be smaller than or equal to 2000.";
        }

        if ($this->container['sendNo'] === null) {
            $invalidProperties[] = "'sendNo' can't be null";
        }
        if ((mb_strlen($this->container['sendNo']) > 13)) {
            $invalidProperties[] = "invalid value for 'sendNo', the character length must be smaller than or equal to 13.";
        }

        if ($this->container['recipientList'] === null) {
            $invalidProperties[] = "'recipientList' can't be null";
        }
        if (!is_null($this->container['userId']) && (mb_strlen($this->container['userId']) > 100)) {
            $invalidProperties[] = "invalid value for 'userId', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets templateId
     *
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param string $templateId 발송 템플릿 ID
     *
     * @return $this
     */
    public function setTemplateId($templateId)
    {
        if (!is_null($templateId) && (mb_strlen($templateId) > 50)) {
            throw new \InvalidArgumentException('invalid length for $templateId when calling MmsBody., must be smaller than or equal to 50.');
        }

        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 메세지 제목 (표준 40Byte)
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 40)) {
            throw new \InvalidArgumentException('invalid length for $title when calling MmsBody., must be smaller than or equal to 40.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body 본문 내용 (개행은 \\n으로, 장문 표준 2000바이트)
     *
     * @return $this
     */
    public function setBody($body)
    {
        if ((mb_strlen($body) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $body when calling MmsBody., must be smaller than or equal to 2000.');
        }

        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets sendNo
     *
     * @return string
     */
    public function getSendNo()
    {
        return $this->container['sendNo'];
    }

    /**
     * Sets sendNo
     *
     * @param string $sendNo 발신 번호
     *
     * @return $this
     */
    public function setSendNo($sendNo)
    {
        if ((mb_strlen($sendNo) > 13)) {
            throw new \InvalidArgumentException('invalid length for $sendNo when calling MmsBody., must be smaller than or equal to 13.');
        }

        $this->container['sendNo'] = $sendNo;

        return $this;
    }

    /**
     * Gets requestDate
     *
     * @return string
     */
    public function getRequestDate()
    {
        return $this->container['requestDate'];
    }

    /**
     * Sets requestDate
     *
     * @param string $requestDate 예약 일시
     *
     * @return $this
     */
    public function setRequestDate($requestDate)
    {
        $this->container['requestDate'] = $requestDate;

        return $this;
    }

    /**
     * Gets sendingGroupingKey
     *
     * @return string
     */
    public function getSendingGroupingKey()
    {
        return $this->container['sendingGroupingKey'];
    }

    /**
     * Sets sendingGroupingKey
     *
     * @param string $sendingGroupingKey 발신자 그룹키
     *
     * @return $this
     */
    public function setSendingGroupingKey($sendingGroupingKey)
    {
        $this->container['sendingGroupingKey'] = $sendingGroupingKey;

        return $this;
    }

    /**
     * Gets recipientList
     *
     * @return \ToastCloud\Model\Recipient[]
     */
    public function getRecipientList()
    {
        return $this->container['recipientList'];
    }

    /**
     * Sets recipientList
     *
     * @param \ToastCloud\Model\Recipient[] $recipientList recipientList
     *
     * @return $this
     */
    public function setRecipientList($recipientList)
    {
        $this->container['recipientList'] = $recipientList;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId userId
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        if (!is_null($userId) && (mb_strlen($userId) > 100)) {
            throw new \InvalidArgumentException('invalid length for $userId when calling MmsBody., must be smaller than or equal to 100.');
        }

        $this->container['userId'] = $userId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


