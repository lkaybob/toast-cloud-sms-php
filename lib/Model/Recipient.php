<?php
/**
 * Recipient
 *
 * PHP version 5
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Toast Cloud SMS
 *
 * Toast Cloud SMS API Specification
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ToastCloud\Model;

use \ArrayAccess;
use \ToastCloud\ObjectSerializer;

/**
 * Recipient Class Doc Comment
 *
 * @category Class
 * @description 문자 수신자 정보
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recipient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipientNo' => 'string',
        'countryCode' => 'string',
        'internationalRecipientNo' => 'string',
        'templateParameter' => '\ToastCloud\Model\TemplateParameter',
        'recipientGroupingKey' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recipientNo' => null,
        'countryCode' => null,
        'internationalRecipientNo' => null,
        'templateParameter' => null,
        'recipientGroupingKey' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipientNo' => 'recipientNo',
        'countryCode' => 'countryCode',
        'internationalRecipientNo' => 'internationalRecipientNo',
        'templateParameter' => 'templateParameter',
        'recipientGroupingKey' => 'recipientGroupingKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipientNo' => 'setRecipientNo',
        'countryCode' => 'setCountryCode',
        'internationalRecipientNo' => 'setInternationalRecipientNo',
        'templateParameter' => 'setTemplateParameter',
        'recipientGroupingKey' => 'setRecipientGroupingKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipientNo' => 'getRecipientNo',
        'countryCode' => 'getCountryCode',
        'internationalRecipientNo' => 'getInternationalRecipientNo',
        'templateParameter' => 'getTemplateParameter',
        'recipientGroupingKey' => 'getRecipientGroupingKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipientNo'] = isset($data['recipientNo']) ? $data['recipientNo'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['internationalRecipientNo'] = isset($data['internationalRecipientNo']) ? $data['internationalRecipientNo'] : null;
        $this->container['templateParameter'] = isset($data['templateParameter']) ? $data['templateParameter'] : null;
        $this->container['recipientGroupingKey'] = isset($data['recipientGroupingKey']) ? $data['recipientGroupingKey'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipientNo'] === null) {
            $invalidProperties[] = "'recipientNo' can't be null";
        }
        if ((mb_strlen($this->container['recipientNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'recipientNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['countryCode']) && (mb_strlen($this->container['countryCode']) > 255)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['recipientGroupingKey']) && (mb_strlen($this->container['recipientGroupingKey']) > 100)) {
            $invalidProperties[] = "invalid value for 'recipientGroupingKey', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipientNo
     *
     * @return string
     */
    public function getRecipientNo()
    {
        return $this->container['recipientNo'];
    }

    /**
     * Sets recipientNo
     *
     * @param string $recipientNo 수신번호 (countryCode와 조합하여 사용 가능, 최대 1000명)
     *
     * @return $this
     */
    public function setRecipientNo($recipientNo)
    {
        if ((mb_strlen($recipientNo) > 50)) {
            throw new \InvalidArgumentException('invalid length for $recipientNo when calling Recipient., must be smaller than or equal to 50.');
        }

        $this->container['recipientNo'] = $recipientNo;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode 국가 번호 [기본값: 82(한국)]
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        if (!is_null($countryCode) && (mb_strlen($countryCode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling Recipient., must be smaller than or equal to 255.');
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets internationalRecipientNo
     *
     * @return string
     */
    public function getInternationalRecipientNo()
    {
        return $this->container['internationalRecipientNo'];
    }

    /**
     * Sets internationalRecipientNo
     *
     * @param string $internationalRecipientNo 국가 번호가 포함된 수신 번호 [예)821012345678, recipientNo가 있을 경우 이 값은 무시된다.]
     *
     * @return $this
     */
    public function setInternationalRecipientNo($internationalRecipientNo)
    {
        $this->container['internationalRecipientNo'] = $internationalRecipientNo;

        return $this;
    }

    /**
     * Gets templateParameter
     *
     * @return \ToastCloud\Model\TemplateParameter
     */
    public function getTemplateParameter()
    {
        return $this->container['templateParameter'];
    }

    /**
     * Sets templateParameter
     *
     * @param \ToastCloud\Model\TemplateParameter $templateParameter templateParameter
     *
     * @return $this
     */
    public function setTemplateParameter($templateParameter)
    {
        $this->container['templateParameter'] = $templateParameter;

        return $this;
    }

    /**
     * Gets recipientGroupingKey
     *
     * @return string
     */
    public function getRecipientGroupingKey()
    {
        return $this->container['recipientGroupingKey'];
    }

    /**
     * Sets recipientGroupingKey
     *
     * @param string $recipientGroupingKey recipientGroupingKey
     *
     * @return $this
     */
    public function setRecipientGroupingKey($recipientGroupingKey)
    {
        if (!is_null($recipientGroupingKey) && (mb_strlen($recipientGroupingKey) > 100)) {
            throw new \InvalidArgumentException('invalid length for $recipientGroupingKey when calling Recipient., must be smaller than or equal to 100.');
        }

        $this->container['recipientGroupingKey'] = $recipientGroupingKey;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


